<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="css/main.css"?>
<excercises>
    <header>Iterativ Mjukvaruutveckling 1DV404</header>
    <collection> 
        <excercise>
            <stamp id="1" date="20141118" startTime="08:15" endTime="08:45">
                <notes>Läst labb-pm för att förstå syftet med labbarna. En helhetsbild för de olika "uppgifterna"</notes>
            </stamp>
            <stamp id="2" date="20141119" startTime="13:15" endTime="15:15">
                <notes>Implementerat en räknare (javascript) som räknar orden i elementet &lt;answer&gt; </notes>
            </stamp>          
                <desc>Laboration Förberedande</desc>
                <documentation>
                    <strategy class="doc">
                    Laboration 1 DV404 - Planering och förbättring. För att erhålla struktur och ordning så har jag valt att genomföra planering med hjälp av dokumentet timelog.xml. För att en laboration ska vara komplett måste samtlig innehåll inneha ett värde. Tanken med att använda xml i boten för data är att jag på ett "enkelt" och strukturereat sätt ska kunna överföra data till exempelvis en html5 application eller kanske rentav ett layoutprogram likt Adobe InDesign.
                    </strategy>
                    <failure class="doc"></failure>
                    <planningDeviation class="doc"></planningDeviation>
                </documentation>    
        </excercise>
    </collection>
<!--Excercise 1 - START -->
    <collection>
        <desc>Uppgift 1 - Tre "enkla" programmeringsuppgifter</desc>
        <excercise>
            <stamp id="1" date="20141118" startTime="08:45" endTime="09:00"/>
            <stamp id="2" date="20141118" startTime="09:15" endTime="11:30"/>
            <stamp id="3" date="20141118" startTime="12:30" endTime="14:30"/>
            <stamp id="4" date="20141118" startTime="14:30" endTime="15:00"/>
                <desc>Uppgift 1A</desc>
                <documentation>
                    <strategy class="doc">Förberedelse gjord genom att läsa "labb-om" noggrant och att utefter analys försöka visuellt rita programmet då det för min del brukar innebära bättre struktur i arbete.</strategy>
                    <failure class="doc">Jag gjorde en uppskattad tidsåtgång på 60min som blev helt fel i detta projekt. Orsak var att jag inte tänkte på att ett klick på en submit-knapp innebär en reload av sidan. Där fastnade jag ganska länge utan att komma vidare.</failure>
                    <planningDeviation class="doc">Första timmen på dett lilla projetk var effektivt. Jag följde planen enligt min skiss och "programmet var funktionellt efter en timme. En avvikelse kan väl vara att jag tog till för mycket tid med css, vilket inte för programmet var nödvändigt.</planningDeviation>
                </documentation>
        </excercise>
        <excercise>
            <stamp id="1" date="20141118" startTime="16:45" endTime="17:15"/>
            <stamp id="2" date="20141118" startTime="17:45" endTime="18:00"/>
            <stamp id="3" date="20141118" startTime="20:00" endTime="22:00"/>
            <stamp id="3" date="20141119" startTime="08:15" endTime="10:30"/>
                <desc>Uppgift 1B</desc>
                <documentation>
                    <strategy class="doc">Förberedelse genom att läsa labb-pm. Eftersom jag oo för denna labb hade jag svårt att sätta på pränt hur jag skulle rita upp programmet visuellt på papper. Strategin för detta blev helt enkelt att samtidig som kodandet sker försöka visuellt rita programmet i huvudet...</strategy>
                    <failure class="doc">Ett stort misstag som kunde undvikits var att jag valde att inte rita programmets logik. Jag jobbade på fel uppgift!</failure>
                    <planningDeviation class="doc">Min plan var att skriva programmet med oop i javscript. Tycker att jag lyckades följa planden. Däremot kändes den långt ifrån optimal om man ska vara maximalt produktiv/effektiv.</planningDeviation>
                </documentation>
        </excercise>
        <excercise>
            <stamp id="1" date="20141118" startTime="11:00" endTime="11:15">
                <notes>Påbörjar arbete med att kopiera över gammal kod från 1b att utgå ifrån.</notes>
            </stamp>
            <stamp id="1" date="20141118" startTime="12:00" endTime="20:00">
                <notes>Fortsätter att jobba med struktur av mappar. Det här var en mindre produktiv dag. Att sortera tal var svårt när man inte fick använda sig av arrayer så som vanligt är. Mestadels av tiden har inneburit att få ihop logiken i 1c_run.js</notes>
            </stamp>
                <desc>Uppgift 1C</desc>
                <documentation>
                    <strategy class="doc">Program "NastStorst" möjliggör att utgå föregående labb (1b) eftersom programmets påminer om varandra. Startegin blir att "modda" befintlig kod och utöka koden.</strategy>
                    <failure class="doc">Återigen så har jag kört fast och gått runt som i ett ekorrhjul. Som vanligt brukar en paus till koden och nya krafter göra att man löser problemt. Logiken som krävdes för denna uppgiften krävde dock mer tankemöda än över en kopp kaffe. Slutligen kom lösningen efter att jag ritat och skissat koden med figurer på papper.</failure>
                    <planningDeviation class="doc">Egentligen inga avvikelser. Dock är tidsåtgången stor när man är ny på javascript. Jag gjorde som jag tänkt.</planningDeviation>
                </documentation>
        </excercise>
        <reflection>Här skriver jag en reflektion för 1an:</reflection>
    </collection>
<!--Excercise 2 - START -->
    <collection>
        <desc>Uppgift 2 - Förändring och förbättring</desc>
        <excercise>
            <stamp id="1" date="20141119" startTime="08:15" endTime="09:30">
                <notes>Påbärjar Laboration 2. Då jag valt att logga i xml-format ordnar jag med en lämpliga css-filer för dessa. Xml är också validerat och verkar fungera.</notes>
            </stamp>
            <stamp id="2" date="20141119" startTime="09:30" endTime="11:00">
                <notes>Jobbat med strukturering av xml-schema och css mm.</notes>
            </stamp>
            <stamp id="3" date="20141119" startTime="16:30" endTime="17:00">
                <notes>Reflekterat över hur jag utvecklar idag och hur man kan förbättra planering och uppföljning i framtiden.</notes>
            </stamp>
                <desc>Uppgift 2A</desc>
                <documentation>
                    <question>Fråga: Ge exempel på några alternativa strategier som du kan använda i din planering av programmeringsuppgifterna</question>
                    <answer>Svar: Efter genomförandet av laborationer 1a 1b och 1c har min  syn på planering rubbats ganska mycket. Lite luddigt har jag skissat programmen jag vill genomföra antingen direkt i mitt huvude alternativt på papper. Dock känner jag att det kan vara börja till ett mer strukturerat arbete. En första strategi skulle kunna vara att ta fram ett antal faser som man ska loopa sig igenom för att överhuvud taget få gå vidare till steg #2. Utöver tidigare nämd strategi vore det högst aktuellt att lära sig nyttja redan befintliga system (typ uml) för att rita kod på papper. Därmed skulle det vara enklare att i gemensam grupp spåna i idéer och att föra tankarna mot samma mål.</answer>
                </documentation>
                <desc>Uppgift 2B</desc>
                <documentation>
                    <question>Fråga: Två av anledningarna till att din planering avviker från verkligheten är dels felen du gör dels alla andra saker som inträffar. Hur kan du ta hänsyn till eller minska konsekvenserna av dessa? Ge konkreta exempel på dina erfarenheter.</question>
                    <answer>Svar: Vad gäller att man avviker från planering finns några frågor av högsta prioritet. Är arbetet möjligt att planera? Är det möjligt att göra en plan så kan man följa planen, annars så kan man inte avvika. Resultate av detta blir att man inte har något/några delmål i sin planering. Steg ett kan rimligen vara att ta ställning till hur man verkställer en plan som går att följa innehållandes rimliga mål. Därefter är det lämpligt att planen i sig innehåller ett antal "stanna upp och reflektera" tillfällen. Dels för att stämma av hur arbete fortgår och om målen verkar uppfyllas så som tänkt är. Kanske det också vid dessa tillfällen ska beaktas om planeringen ska revideras. </answer>
                </documentation>
                <desc>Uppgift 2C</desc>
                <documentation>
                    <question>Fråga/övning: Implementera två "förbättringsåtgärder" i ditt planeringsarbete.</question>
                    <answer>Svar: Åtgärd no1. Läs igenom labb-pm noggrant och hitta delmål som måste uppfyllas innan arbete kan vidare till nästkommande punkt.</answer>
                </documentation>
        </excercise>
    </collection>
    <!--Excercise 3 - START -->
    <collection>
        <excercise>
            <stamp id="1" date="20141119" startTime="19:30" endTime="19:45">
                <notes>Börjar med att implementera förbättringsåtgärder enligt uppgift 2C. En direktföljd av att jag behöver planera är att jag lägger till ett xml-element "planning". Ska försöka få ett "nytt" och mer strukturerat tänk för att utveckla program. En annan sak som kommer göra det enklare att jobba strukturerat är att jag ska övergå till punktform i dokumentationen</notes>
            </stamp>
            <stamp id="2" date="20141119" startTime="20:00" endTime="20:45">
                <notes>Diverse formulärsfix och css för att se logik. Nästa punkt blir att hitta återanvändbara "generella delmål" som förhoppningsvis ska kunna återanvänds om och om igen. Självklart med vidare förädling då...</notes>
            </stamp>
            <stamp id="3" date="20141119" startTime="19:30" endTime="19:45">
                <notes>Diverse småfix....</notes>
            </stamp>
            <stamp id="4" date="20141119" startTime="22:00" endTime="23:00">
                <notes>Arbetar med punktlistor i "formulär"....</notes>
            </stamp>
            <stamp id="5" date="20141121" startTime="12:00" endTime="12:15">
                <notes>Justerar mina formulär med resultattid och annat småfix...</notes>
            </stamp>
                <desc>Uppgift 3</desc>
                <documentation>
                    <strategy></strategy>
                    <planning>
                        <planningList>
                            <planningPoint>Delmål</planningPoint>
                                <dataH>[ ] Implementera klasser</dataH>
                                <dataP>[+00:00] Kalkylens tid</dataP>
                                <dataP>[+00:00] Faktiskt tid</dataP>
                                <dataP>[+00:00] Resultat tid</dataP>
                        </planningList>
                    </planning>
                    <failure>
                        <failureList>
                            <failurePoint>Rubrik</failurePoint>  
                                <data>[ ] Lorem Ipsum Lorem Ipsum</data>
                                <data>[ ] Lorem Ipsum Lorem Ipsum</data>
                        </failureList>
                    </failure>
                    <planningDeviation>
                        <planningDeviationList>
                            <planningDeviationPoint>Rubrik</planningDeviationPoint>
                                <data>[ ] Lorem Ipsum Lorem Ipsum</data>
                                <data>[ ] Lorem Ipsum Lorem Ipsum</data>
                        </planningDeviationList>
                    </planningDeviation>
            </documentation>
        </excercise>
        <excercise>
                <desc>Uppgift 3A</desc>
                    <report>Resultat totat tid: [+01:15]</report>
                <documentation>
                    <strategy>Läser labb-pm noga. Eftersom programmet inte verkar så omfattande väljer jag att endast dela in uppgiften i tre delmål. Delmålen läggs därefter in i formuläret "planninglist" med respektive uppskattad tidsåtgån. Då man därefter lätt "mäta" resultate av det man kodat.</strategy>
                    <planning>
                        <planningList>
                            <planningPoint>Delmål</planningPoint>
                                
                                <dataH>[X] Planering av uppgift</dataH>
                                    <stamp id="1" date="20141120" startTime="09:00" endTime="09:30">
                                        <notes>Börjar med planering och får ännu en gång modifiera formulär...</notes>
                                    </stamp>
                                    <dataP>[+00:30] Kalkylens tid</dataP>
                                    <dataP>[+00:30] Faktiskt tid</dataP>
                                    <dataP>[+00:00] Resultat tid</dataP>
                                
                                <dataH>[X] Återvinn html/css/js från tidigare labbar</dataH>
                                    <stamp id="1" date="20141120" startTime="09:30" endTime="09:45">
                                        <notes>Hämtar över befintliga filer från tidigare projekt. Justerat befintliga hårdkodade data att stämma överens med aktuell uppgift.</notes>
                                    </stamp>
                                    <dataP>[+00:30] Kalkylens tid</dataP>
                                    <dataP>[+00:15] Faktiskt tid</dataP>
                                    <dataP>[+00:15] Resultat tid</dataP>
                                
                                <dataH>[X] Skapa funktionskonstruktor Palindrom som tar en "sträng" som argument. Implementera metoderna "revString" och "checkLwrCase" och medlemmarna inputStr och revInputStr.</dataH>
                                    <stamp id="1" date="20141120" startTime="09:45" endTime="10:45">
                                        <notes>Konstruktorn fungerar som den ska har flytit på riktigt bra. Däremot är jag osäker på om jag ska hindra att något annat är gemener tillåts att komma in och beräknas och kasta fel, alternativ att man gör om inmatad strän till lowercase per automatik. Jag väljer dock att kasta fel om något annat än småbokstäver är på ingån och kommer att sköta det med felhantering i den sista delen av planninglist.</notes>
                                    </stamp>
                                    <dataP>[+01:30] Kalkylens tid</dataP>
                                    <dataP>[+01:00] Faktiskt tid</dataP>
                                    <dataP>[+00:30] Resultat tid</dataP>
                                
                                <dataH>[X] Implementera metod som hanterar inmatning av fel typ</dataH>
                                    <stamp id="1" date="20141120" startTime="10:45" endTime="11:15">
                                        <notes>Nu har jag  fått de olika delaran att fungera fritt och var för sig. Värden verkar returna som de ska och att reversa strängen verkar inte vara problem heller. Nu ska det bara vara att sy ihop applikation i filen 3a.js</notes>
                                    </stamp>
                                    <stamp id="1" date="20141120" startTime="11:15" endTime="11:45">
                                        <notes>Nu ska applikationen vara testa och klar. En fråga man dock kan ställa sig är om man ska godkänna siffror i sin palindrom. Ett alternativ skulle kunna vara att implementera ett test även för detta på prototypen i konstruktorfunktion Palindrom.</notes>
                                    </stamp>
                                    <dataP>[+01:30] Kalkylens tid</dataP>
                                    <dataP>[+01:00] Faktiskt tid</dataP>
                                    <dataP>[+00:30] Resultat tid</dataP>
                                    
                                <dataH>[x] Slutrapport och sammanställning</dataH>
                                    <stamp id="1" date="20141120" startTime="11:45" endTime="12:00">
                                        <notes>Räknar ihop tid för att lämna i fältet under rubriken</notes>
                                    </stamp>
                                    <dataP>[+00:15] Kalkylens tid</dataP>
                                    <dataP>[+00:15] Faktiskt tid</dataP>
                                    <dataP>[+00:00] Resultat tid</dataP>
                                
                        </planningList>
                    </planning>
                    <failure>
                        <failureList>
                            <failurePoint>Rubrik</failurePoint>  
                                <data>Ett återkommande fel/misstag som jag gör i javascript är att glömma sätta parenteser i funktionsanrop. Det har hänt flera ggr de sista dagarna. Får fundera över hur jag ska kunna motverka att det händer. Kanske det kan vara intellisensen på C9 som bråkar med mig...?</data>
                        </failureList>
                    </failure>
                    <planningDeviation>
                        <planningDeviationList>
                            <planningDeviationPoint>Rubrik</planningDeviationPoint>
                                <data>Efter fullgjord uppgift insåg jag att inget formulär fanns för att kunna göra en slutrapport. Den fick jag lägga till som ett delmål fyra. Den måste rimligen alltid finnas eftersom det ligger dold tid i denna beroende på omfattningen på programmet/arbetet.</data>

                        </planningDeviationList>
                    </planningDeviation>
            </documentation>
        </excercise>
        <excercise>
            <desc>Uppgift 3B</desc>
                <report>Resultat totat tid: [+00:00]</report>
            <documentation>
                <strategy>Läser återgien labb-pm noggrant. Eftersom konstruktor och klasser mm. är uppradade så beräknar jag att utföra uppgiften genom att implementera dessa. Eftersom jag redan har "facit" och grundstommen av vad som behövs för denna uppgift slipper jag att analysera detta för denna uppgiften. Jag kommer att lösa uppgiften genom att på papper ritan in hur konstruktor metoder mm. ska arbeta med varandra för att når resultat. Jag börjar alltså inte koda denna lösning innna jag har ett "visuellt" svar på hur uppgiften ska lösas på ett logiskt och strukturerat sätt. Efter att jag har skissat upp på ett papper kommer jag att sätta delmålen och tid fördessa som ska hjälpa mig att forcera genom denna uppgiften.</strategy>
                <planning>
                    <planningList>
                        <planningPoint>Delmål</planningPoint>
            
                            <dataH>[X] Planering av uppgift</dataH>
                            <stamp id="1" date="20141121" startTime="13:30" endTime="13:45">
                                <notes>Sätter mig in i uppgiften ytterligare.... Skapat "planeringsformulär". Nu ska jag sätta mig en stund med penna och papper för att få logik i programmet innan jag börjar koda och snurrar till det allt för mycket.</notes>
                            </stamp>
                            <dataP>[+01:30] Kalkylens tid</dataP>
                            <dataP>[+00:00] Faktiskt tid</dataP>
                            <dataP>[+00:00] Resultat tid</dataP>
                            
                    </planningList>          
                </planning>
            </documentation>
        </excercise>    
            
    </collection>
<script xmlns="http://www.w3.org/1999/xhtml" src="js/main.js"></script>
</excercises>












