<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="css/main.css"?>
<excercises>
    <header>Iterativ Mjukvaruutveckling 1DV404</header>
    <collection> 
        <excercise>
            <stamp id="1" date="20141118" startTime="08:15" endTime="08:45">
                <notes>Läst labb-pm för att förstå syftet med labbarna. En helhetsbild för de olika "uppgifterna"</notes>
            </stamp>
            <stamp id="2" date="20141119" startTime="13:15" endTime="15:15">
                <notes>Implementerat en räknare (javascript) som räknar orden i elementet &lt;answer&gt; </notes>
            </stamp>          
                <desc>Laboration Förberedande</desc>
                <documentation>
                    <strategy class="doc">
                    Laboration 1 DV404 - Planering och förbättring. För att erhålla struktur och ordning så har jag valt att genomföra planering med hjälp av dokumentet timelog.xml. För att en laboration ska vara komplett måste samtlig innehåll inneha ett värde. Tanken med att använda xml i boten för data är att jag på ett "enkelt" och strukturereat sätt ska kunna överföra data till exempelvis en html5 application eller kanske rentav ett layoutprogram likt Adobe InDesign.
                    </strategy>
                    <failure class="doc"></failure>
                    <planningDeviation class="doc"></planningDeviation>
                </documentation>    
        </excercise>
    </collection>
<!--Excercise 1 - START -->
    <collection>
        <desc>Uppgift 1 - Tre "enkla" programmeringsuppgifter</desc>
        <excercise>
            <stamp id="1" date="20141118" startTime="08:45" endTime="09:00"/>
            <stamp id="2" date="20141118" startTime="09:15" endTime="11:30"/>
            <stamp id="3" date="20141118" startTime="12:30" endTime="14:30"/>
            <stamp id="4" date="20141118" startTime="14:30" endTime="15:00"/>
                <desc>Uppgift 1A</desc>
                <documentation>
                    <strategy class="doc">Förberedelse gjord genom att läsa "labb-om" noggrant och att utefter analys försöka visuellt rita programmet då det för min del brukar innebära bättre struktur i arbete.</strategy>
                    <failure class="doc">Jag gjorde en uppskattad tidsåtgång på 60min som blev helt fel i detta projekt. Orsak var att jag inte tänkte på att ett klick på en submit-knapp innebär en reload av sidan. Där fastnade jag ganska länge utan att komma vidare.</failure>
                    <planningDeviation class="doc">Första timmen på dett lilla projetk var effektivt. Jag följde planen enligt min skiss och "programmet var funktionellt efter en timme. En avvikelse kan väl vara att jag tog till för mycket tid med css, vilket inte för programmet var nödvändigt.</planningDeviation>
                </documentation>
        </excercise>
        <excercise>
            <stamp id="1" date="20141118" startTime="16:45" endTime="17:15"/>
            <stamp id="2" date="20141118" startTime="17:45" endTime="18:00"/>
            <stamp id="3" date="20141118" startTime="20:00" endTime="22:00"/>
            <stamp id="3" date="20141119" startTime="08:15" endTime="10:30"/>
                <desc>Uppgift 1B</desc>
                <documentation>
                    <strategy class="doc">Förberedelse genom att läsa labb-pm. Eftersom jag oo för denna labb hade jag svårt att sätta på pränt hur jag skulle rita upp programmet visuellt på papper. Strategin för detta blev helt enkelt att samtidig som kodandet sker försöka visuellt rita programmet i huvudet...</strategy>
                    <failure class="doc">Ett stort misstag som kunde undvikits var att jag valde att inte rita programmets logik. Jag jobbade på fel uppgift!</failure>
                    <planningDeviation class="doc">Min plan var att skriva programmet med oop i javscript. Tycker att jag lyckades följa planden. Däremot kändes den långt ifrån optimal om man ska vara maximalt produktiv/effektiv.</planningDeviation>
                </documentation>
        </excercise>
        <excercise>
            <stamp id="1" date="20141118" startTime="11:00" endTime="11:15">
                <notes>Påbörjar arbete med att kopiera över gammal kod från 1b att utgå ifrån.</notes>
            </stamp>
            <stamp id="1" date="20141118" startTime="12:00" endTime="20:00">
                <notes>Fortsätter att jobba med struktur av mappar. Det här var en mindre produktiv dag. Att sortera tal var svårt när man inte fick använda sig av arrayer så som vanligt är. Mestadels av tiden har inneburit att få ihop logiken i 1c_run.js</notes>
            </stamp>
                <desc>Uppgift 1C</desc>
                <documentation>
                    <strategy class="doc">Program "NastStorst" möjliggör att utgå föregående labb (1b) eftersom programmets påminer om varandra. Startegin blir att "modda" befintlig kod och utöka koden.</strategy>
                    <failure class="doc">Återigen så har jag kört fast och gått runt som i ett ekorrhjul. Som vanligt brukar en paus till koden och nya krafter göra att man löser problemt. Logiken som krävdes för denna uppgiften krävde dock mer tankemöda än över en kopp kaffe. Slutligen kom lösningen efter att jag ritat och skissat koden med figurer på papper.</failure>
                    <planningDeviation class="doc">Egentligen inga avvikelser. Dock är tidsåtgången stor när man är ny på javascript. Jag gjorde som jag tänkt.</planningDeviation>
                </documentation>
        </excercise>
        <reflections>
            <stamp id="1" date="20141123" startTime="8:00" endTime="09:00">
                <notes>Reflekterat uppgift 1a. (Planering, tänka efter, fundera, begrunda, spekulera, överväga är ord som hjälper mig att komma igenom skrivandet för att om möjligt uppnå kravet på antal ord i reflektionerna....</notes>
            </stamp>
            <reflection>Reflektion Uppgift 1a: Den här uppgiften var ganska så rättfram vad det gäller logiken i själva programmet. Enkelt att skapa sig en bild av det är som ska utföras. Uppgiften i sig bygger inte heller upp några särskilda krav på hur ett färdigt program ska vara vid leverans. Frågor som dyker upp nu kan dock vara felhantering. Eftersom metoden endast har intress av att "räkna" gement "a" och versalt "A" innebär det ju att det enda som ska in i programmet och beräknas faktiskt är bokstäver. Ytterligae påbyggnad av programmets funktionalitet skulle kunna vara att lägga in try/catch-satser med felhantering. Exempelvis skulle man kunna på ett tydligt sätt markera formulärsfältet med någon "skrikig" färg att här har det blivit fel. Varsågod att mata in ett nytt värde. Självklart skulle man bygga in även denna funktionalitet  med hjälp av javascript. Däremot vore det möjligen lämpligt att skapa en "error.js" för detta ändamålet. Vad gäller felhantering och validering under programmets gång så är det något som jag vill bli så mycket bättre på. Jag tänker att kan man bygga in "hinder" i programutveckling som gör att tydliga fel uppkommer så skulle man ha väldigt stort nytta av detta. Ibland, eller kanska rentav ganska ofta. Framförallt då när kodning sker i javscript innfinner sig en känsla av att man tappar kontakten med kodandet. Saker uppför sig inte som man tänkt sig att det ska. Innan denna kursen "Iterativ Mjukvaruutveckling" så läste jag C# med hjälp av utvecklingsmiljön Visual Studio. Kan känna att just "debuggin" i javscript känns svårate då jag inte hitta snabba vägar att debugga på ett effektivt sätt. Om man ska dra en paralell i att utvecklar program till exempelvis löpning så kan man nog säga att man kan ha en tränande löpare som tränar regelbundet som en förebild. Träningarna i sig kan man se som delmål för att slutligen komma till huvudmålet för just träningen. Om man översätter löparen små delmål till "punktform" för att nå huvudmålet (färdig applikation) så kommer man få arbetet att löpa på så mycket bättre. Har man dessutom tidsuppskatta och kalkylreat de olika delmålen/leveranserna av programvara så kan man även följa upp detta. Antingen håller kalkyerna, kanske rentav att man går plus. Eller i det sämre läget. Man har räknat bort sig och måste därmed revidera sin kalkylberäkning inför framtida projekt. Däremot kan delmålen och just uppföljning och eventuell aktuell reflektion kring dessa göra alla parter i projektet mer medvetna om problematiken för olika uppgifter inom "samma projekt".</reflection>
            <stamp id="2" date="20141123" startTime="09:00" endTime="10:00"> 
                <notes>Reflekterat uppgift 1b</notes>
            </stamp>
            <reflection>Reflektion Uppgift 1b: Vid start av uppgift 1b gjordes ganska omgående upptäckten av att återanvändning av kod från tidigare uppgift (1a) borde vara möjlig. Tänkte att likheten i programmet möjliggr "absolut" återanvänding av html/scc och det enda som jag egentligen behövde modifiera var logiken i programmet. Paralellt med denna kurs läser jag javscript. Javascript är också det språk som jag kommer att använda för samtliga upgifter i Laboration 1 DV404 - Planering och förbättring. Anledning till att jag väljer javscript framför c# eller php (som jag anser mig kunna om man jämför mer javscript) är att jag ser det som en självklarhet att utmana sig själv att sträcka sig efter nya insikter och bli förhoppningsvis en bättre och mer komplett programmerare. Därför har jag därför i denna uppgift för första gången försökt att tillämpa något som heter konstruktorfunktioner i javascript. En konstruktorfunktion i javscript är så nog så "nära" en klass man kan komma i javscript. Konstruktorfunktionen kom jag att kalla Calculator och ligger i filen Calculator.js. Att lägga märke till är att filnamn och funktion har samma benämning med en första boksta som versal. Möjligen kan man se det som "överkurs" att göra en "klass" för denna labb, men då jag behöver parallel träning mot kursen webbteknik I i javascript ser jag det som ett utmärkt tillfälle för repetition. Vad gäller konstruktorfunktionen så skapade jag en medlem som var ansvarig för att hålla aktuell sträng, en räknar som fick ta emot värdet från " nollor" (this.zeros) 1b_run.js vid körning, en räknare som tog emot udda tal (this.odd) och slutligen också en räknare för de jämna talen (this.even). Känner att jag gjort mig en stor tjänst i denna lösning då jag börjar greppa styrkan i att använda sig av objekt i programmering. Det kändes väldigt ledande i själva programmerandet just när man skrev "iteratorn" i "1b_run.js" hur den skulle skicka iväg räknade värden för att läggas in i objektet som jag kallade "Calc" i uppgiften. Denna lösning innebär också att det skulle vara betydligt enklare att bygga vidare på en mer komplex beräkning med flera objekt av "Calculator. En viktig bit att minnas från denna labb är att man tydligen aldrig kan läsa en uppgift för många ggr. Jag hade troligen ett stort intresse av att jobba med labb 1c när det var labb 1b som skulle göras. Lyckligtvis var det inte värre än att jag "moddade" koden jag vid tillfället lyckas att skapa för att passa för den rätta uppgiften. Har också vid denna labb förjat fundera på det här planering av mjukvaruprojekt. Kanske ska man lägga dit kommentare när man ändå tidsrapportera. Kan för egen del tycka att det gått åt alldeles för mycket tid för detta enkla program så här efteråt. En tid säger ju inte vad det är man gjort. Detta skulle också vara högaktuellt vid "uppföljningsmöten" och utvärderingar och olika slag. Som ett stöd för "förbättringsåtgärder". Könns som en bra och kritisk tanke oftare dyker upp i mitt huvud nu. Vad håller jag på med och vad gör jag av min tid?. Är detta effektivt nog tidsmässig?</reflection>
            <stamp id="3" date="20141123" startTime="10:15" endTime="11:00"> 
                <notes>Reflekterat uppgift 1c</notes>
            </stamp>
            <reflection>Tänkte att den här uppgiften är gjord på en kvart. Det var den som jag av misstag startade med på labb 1b. Intog väl en slapp attityd och slökodade utan att fokuser. Är det nåt som jag börjar att inse. Är man trött och tappar förmågan att hålla flera variabler och logik i huvudet är det dags att ta ett "break". Väldigt ofta är det under dessa micropauser man kommer till insikt. Ibland blir man förblindad av vad det är man ska göra. Vilken ordning man behöver göras saker. Vad är det faktiskt som krävs att man löser för att kunna leverera en fungerande programvara. Uppgiften gjorde mig frustrerad eftersom jag saknade någon form av kontrollvariabel under körningen. Borde noterat vilken variabel det var men gjorde inte så. Härmed inser jag då återigen allvaret i att utvärdera sig själv, så som dessa uppfgifter "påtvingar" oss att göra. Vad gäller mina formulär så börjar jag känna att det finns "utveckligspotential" i att använda sig av den metod som jag valt. Det var en lång startsträcka med de är ett gott stöd nu när de finns på plats. När jag rappoerterar en tid blir det snyggt och prydligt. Även om jag känner att själva programmeringen misslyckas emellanåt så är i alla fall tidsrapportering väl strukturerad. Vad gäller lösningen för denna uppgiften utgick jag jag som tidigare sagt från uppgift 1b. Justerade min konstruktorfunktions medlemsvariabler till lämpliga värden. Initialt använde jag mig av tre "värdehållare" för att lösa problemet. Trologen var detta en stor bov till att det tog så lång tid att bli färdig. Det tog inte speciellt lång tid efter att jag ritat upp ett "pyramidliknade" algoritm att inse att jag faktisk bara behövde två värde sparade under "runtime". Programmet bygger på att att this.firstNr alltid ska innehålla ett lägre värde än variabeln this.secondNr. När programmet väl har itererar över hela textsträngen så kommer värdet som finns i this.firstNr att vara värdet som ska presenteras. Dock finns utöver detta en del logik som tvingar att fylla objektets variable från null-värden innan sortering kan utföras. Man kan ju inte sorter bara ett värde! Tycker att denna laboration blev väldigt svår de jag intuitivt tänker lösning i form av en array istället. Då hade man löst problematiken på nolltid mot vad denna övning krävde. Insikten om att övning på att rita algoritm och logik har dock om dein inte var stor tidigare blivit stor nu. Nästan att man önskar att få läsa en kurs i hur man gör detta så snart som möjligt. Det skulle troligen spara väldigt mycket tid. Det svåratst problemet som jag tycker man kan ställas inför i programmering är när man tappar algoritmen. När man inte längre är säker på vad en variables funktion faktiskt är. Sitter man därtill och intar en "slökodningsattityd" som jag faktiskt gjorde i denna uppgift då blir även de mest triviala uppgifterna svåra. Då gör man sig en större tjänst om man tar en paus, diskuterar kanske problemet med en kollega så kommer man inte förvärra en dålig algoritm ytterligare!</reflection>
        </reflections>
    </collection>
<!--Excercise 2 - START -->
    <collection>
        <desc>Uppgift 2 - Förändring och förbättring</desc>
        <excercise>
            <stamp id="1" date="20141119" startTime="08:15" endTime="09:30">
                <notes>Påbärjar Laboration 2. Då jag valt att logga i xml-format ordnar jag med en lämpliga css-filer för dessa. Xml är också validerat och verkar fungera.</notes>
            </stamp>
            <stamp id="2" date="20141119" startTime="09:30" endTime="11:00">
                <notes>Jobbat med strukturering av xml-schema och css mm.</notes>
            </stamp>
            <stamp id="3" date="20141119" startTime="16:30" endTime="17:00">
                <notes>Reflekterat över hur jag utvecklar idag och hur man kan förbättra planering och uppföljning i framtiden.</notes>
            </stamp>
                <desc>Uppgift 2A</desc>
                <documentation>
                    <question>Fråga: Ge exempel på några alternativa strategier som du kan använda i din planering av programmeringsuppgifterna</question>
                    <answer>Svar: Efter genomförandet av laborationer 1a 1b och 1c har min  syn på planering rubbats ganska mycket. Lite luddigt har jag skissat programmen jag vill genomföra antingen direkt i mitt huvude alternativt på papper. Dock känner jag att det kan vara börja till ett mer strukturerat arbete. En första strategi skulle kunna vara att ta fram ett antal faser som man ska loopa sig igenom för att överhuvud taget få gå vidare till steg #2. Utöver tidigare nämd strategi vore det högst aktuellt att lära sig nyttja redan befintliga system (typ uml) för att rita kod på papper. Därmed skulle det vara enklare att i gemensam grupp spåna i idéer och att föra tankarna mot samma mål.</answer>
                </documentation>
                <desc>Uppgift 2B</desc>
                <documentation>
                    <question>Fråga: Två av anledningarna till att din planering avviker från verkligheten är dels felen du gör dels alla andra saker som inträffar. Hur kan du ta hänsyn till eller minska konsekvenserna av dessa? Ge konkreta exempel på dina erfarenheter.</question>
                    <answer>Svar: Vad gäller att man avviker från planering finns några frågor av högsta prioritet. Är arbetet möjligt att planera? Är det möjligt att göra en plan så kan man följa planen, annars så kan man inte avvika. Resultate av detta blir att man inte har något/några delmål i sin planering. Steg ett kan rimligen vara att ta ställning till hur man verkställer en plan som går att följa innehållandes rimliga mål. Därefter är det lämpligt att planen i sig innehåller ett antal "stanna upp och reflektera" tillfällen. Dels för att stämma av hur arbete fortgår och om målen verkar uppfyllas så som tänkt är. Kanske det också vid dessa tillfällen ska beaktas om planeringen ska revideras. </answer>
                </documentation>
                <desc>Uppgift 2C</desc>
                <documentation>
                    <question>Fråga/övning: Implementera två "förbättringsåtgärder" i ditt planeringsarbete.</question>
                    <answer>Svar: Åtgärd no1. Läs igenom labb-pm noggrant och hitta delmål som måste uppfyllas innan arbete kan vidare till nästkommande punkt.</answer>
                </documentation>
        </excercise>
    </collection>
    <!--Excercise 3 - START -->
    <collection>
        <excercise>
            <stamp id="1" date="20141119" startTime="19:30" endTime="19:45">
                <notes>Börjar med att implementera förbättringsåtgärder enligt uppgift 2C. En direktföljd av att jag behöver planera är att jag lägger till ett xml-element "planning". Ska försöka få ett "nytt" och mer strukturerat tänk för att utveckla program. En annan sak som kommer göra det enklare att jobba strukturerat är att jag ska övergå till punktform i dokumentationen</notes>
            </stamp>
            <stamp id="2" date="20141119" startTime="20:00" endTime="20:45">
                <notes>Diverse formulärsfix och css för att se logik. Nästa punkt blir att hitta återanvändbara "generella delmål" som förhoppningsvis ska kunna återanvänds om och om igen. Självklart med vidare förädling då...</notes>
            </stamp>
            <stamp id="3" date="20141119" startTime="19:30" endTime="19:45">
                <notes>Diverse småfix....</notes>
            </stamp>
            <stamp id="4" date="20141119" startTime="22:00" endTime="23:00">
                <notes>Arbetar med punktlistor i "formulär"....</notes>
            </stamp>
            <stamp id="5" date="20141121" startTime="12:00" endTime="12:15">
                <notes>Justerar mina formulär med resultattid och annat småfix...</notes>
            </stamp>
                <desc>Uppgift 3 - Förbättrad planering av programmering</desc>
                <documentation>
                    <strategy></strategy>
                    <planning>
                        <planningList>
                            <planningPoint>Delmål</planningPoint>
                                <dataH>[ ] Implementera klasser</dataH>
                                <dataP>[+00:00] Kalkylens tid</dataP>
                                <dataP>[+00:00] Faktiskt tid</dataP>
                                <dataP>[+00:00] Resultat tid</dataP>
                        </planningList>
                    </planning>
                    <failure>
                        <failureList>
                            <failurePoint>Rubrik</failurePoint>  
                                <data>[ ] Lorem Ipsum Lorem Ipsum</data>
                                <data>[ ] Lorem Ipsum Lorem Ipsum</data>
                        </failureList>
                    </failure>
                    <planningDeviation>
                        <planningDeviationList>
                            <planningDeviationPoint>Rubrik</planningDeviationPoint>
                                <data>[ ] Lorem Ipsum Lorem Ipsum</data>
                                <data>[ ] Lorem Ipsum Lorem Ipsum</data>
                        </planningDeviationList>
                    </planningDeviation>
            </documentation>
        </excercise>
        <excercise>
                <desc>Uppgift 3A</desc>
                    <report>Resultat totat tid: [+01:15]</report>
                <documentation>
                    <strategy>Läser labb-pm noga. Eftersom programmet inte verkar så omfattande väljer jag att endast dela in uppgiften i tre delmål. Delmålen läggs därefter in i formuläret "planninglist" med respektive uppskattad tidsåtgån. Då man därefter lätt "mäta" resultate av det man kodat.</strategy>
                    <planning>
                        <planningList>
                            <planningPoint>Delmål</planningPoint>
                                
                                <dataH>[X] Planering av uppgift</dataH>
                                    <stamp id="1" date="20141120" startTime="09:00" endTime="09:30">
                                        <notes>Börjar med planering och får ännu en gång modifiera formulär...</notes>
                                    </stamp>
                                    <dataP>[+00:30] Kalkylens tid</dataP>
                                    <dataP>[+00:30] Faktiskt tid</dataP>
                                    <dataP>[+00:00] Resultat tid</dataP>
                                
                                <dataH>[X] Återvinn html/css/js från tidigare labbar</dataH>
                                    <stamp id="1" date="20141120" startTime="09:30" endTime="09:45">
                                        <notes>Hämtar över befintliga filer från tidigare projekt. Justerat befintliga hårdkodade data att stämma överens med aktuell uppgift.</notes>
                                    </stamp>
                                    <dataP>[+00:30] Kalkylens tid</dataP>
                                    <dataP>[+00:15] Faktiskt tid</dataP>
                                    <dataP>[+00:15] Resultat tid</dataP>
                                
                                <dataH>[X] Skapa funktionskonstruktor Palindrom som tar en "sträng" som argument. Implementera metoderna "revString" och "checkLwrCase" och medlemmarna inputStr och revInputStr.</dataH>
                                    <stamp id="1" date="20141120" startTime="09:45" endTime="10:45">
                                        <notes>Konstruktorn fungerar som den ska har flytit på riktigt bra. Däremot är jag osäker på om jag ska hindra att något annat är gemener tillåts att komma in och beräknas och kasta fel, alternativ att man gör om inmatad strän till lowercase per automatik. Jag väljer dock att kasta fel om något annat än småbokstäver är på ingån och kommer att sköta det med felhantering i den sista delen av planninglist.</notes>
                                    </stamp>
                                    <dataP>[+01:30] Kalkylens tid</dataP>
                                    <dataP>[+01:00] Faktiskt tid</dataP>
                                    <dataP>[+00:30] Resultat tid</dataP>
                                
                                <dataH>[X] Implementera metod som hanterar inmatning av fel typ</dataH>
                                    <stamp id="1" date="20141120" startTime="10:45" endTime="11:15">
                                        <notes>Nu har jag  fått de olika delaran att fungera fritt och var för sig. Värden verkar returna som de ska och att reversa strängen verkar inte vara problem heller. Nu ska det bara vara att sy ihop applikation i filen 3a.js</notes>
                                    </stamp>
                                    <stamp id="1" date="20141120" startTime="11:15" endTime="11:45">
                                        <notes>Nu ska applikationen vara testa och klar. En fråga man dock kan ställa sig är om man ska godkänna siffror i sin palindrom. Ett alternativ skulle kunna vara att implementera ett test även för detta på prototypen i konstruktorfunktion Palindrom.</notes>
                                    </stamp>
                                    <dataP>[+01:30] Kalkylens tid</dataP>
                                    <dataP>[+01:00] Faktiskt tid</dataP>
                                    <dataP>[+00:30] Resultat tid</dataP>
                                    
                                <dataH>[x] Slutrapport och sammanställning</dataH>
                                    <stamp id="1" date="20141120" startTime="11:45" endTime="12:00">
                                        <notes>Räknar ihop tid för att lämna i fältet under rubriken</notes>
                                    </stamp>
                                    <dataP>[+00:15] Kalkylens tid</dataP>
                                    <dataP>[+00:15] Faktiskt tid</dataP>
                                    <dataP>[+00:00] Resultat tid</dataP>
                                
                        </planningList>
                    </planning>
                    <failure>
                        <failureList>
                            <failurePoint>Rubrik</failurePoint>  
                                <data>Ett återkommande fel/misstag som jag gör i javascript är att glömma sätta parenteser i funktionsanrop. Det har hänt flera ggr de sista dagarna. Får fundera över hur jag ska kunna motverka att det händer. Kanske det kan vara intellisensen på C9 som bråkar med mig...?</data>
                        </failureList>
                    </failure>
                    <planningDeviation>
                        <planningDeviationList>
                            <planningDeviationPoint>Rubrik</planningDeviationPoint>
                                <data>Efter fullgjord uppgift insåg jag att inget formulär fanns för att kunna göra en slutrapport. Den fick jag lägga till som ett delmål fyra. Den måste rimligen alltid finnas eftersom det ligger dold tid i denna beroende på omfattningen på programmet/arbetet.</data>

                        </planningDeviationList>
                    </planningDeviation>
            </documentation>
        </excercise>
        <excercise>
            <desc>Uppgift 3B</desc>
                <report>Resultat totat tid: [+00:00]</report>
            <documentation>
                <strategy>Läser återgien labb-pm noggrant. Eftersom konstruktor och klasser mm. är uppradade så beräknar jag att utföra uppgiften genom att implementera dessa. Eftersom jag redan har "facit" och grundstommen av vad som behövs för denna uppgift slipper jag att analysera detta för denna uppgiften. Jag kommer att lösa uppgiften genom att på papper ritan in hur konstruktor metoder mm. ska arbeta med varandra för att når resultat. Jag börjar alltså inte koda denna lösning innna jag har ett "visuellt" svar på hur uppgiften ska lösas på ett logiskt och strukturerat sätt. Efter att jag har skissat upp på ett papper kommer jag att sätta delmålen och tid fördessa som ska hjälpa mig att forcera genom denna uppgiften.</strategy>
                <planning>
                    <planningList>
                        <planningPoint>Delmål</planningPoint>
            
                        <dataH>[X] Planering av uppgift</dataH>
                            <stamp id="1" date="20141121" startTime="13:30" endTime="13:45">
                                <notes>Sätter mig in i uppgiften ytterligare.... Skapat "planeringsformulär". Nu ska jag sätta mig en stund med penna och papper för att få logik i programmet innan jag börjar koda och snurrar till det allt för mycket.</notes>
                            </stamp>
                            <stamp id="2" date="20141121" startTime="14:15" endTime="15:30">
                                <notes>html/css/js från tidigare projekt och annat kringfix för projektet.</notes>
                            </stamp>
                            <dataP>[+01:30] Kalkylens tid</dataP>
                            <dataP>[+01:00] Faktiskt tid</dataP>
                            <dataP>[+00:30] Resultat tid</dataP>
                        
                        <dataH>[X] Impl klasser och metoder mm</dataH>
                            <stamp id="1" date="20141121" startTime="14:00" endTime="15:00">
                                <notes>Implementerar konstruktor metoder mm och länkar js med hmtl. Fixar med strukturering av filer förbättrar helhetsfuntionen av hur programmet ska fungera som färdig applikation.</notes>
                            </stamp>
                            <stamp id="2" date="20141121" startTime="15:00" endTime="15:45">
                                <notes>Jobbat med konstruktorn och prototypen i javscript. multiply implementerad men inte testad ännu.....</notes>
                            </stamp>
                            <stamp id="3" date="20141122" startTime="11:15" endTime="13:20">
                                <notes>Lägger en massa tid på att lära mig att använda klasser, metoder mm i javascript. Inser att min applikation inte återanvänder objektet av Fraction utan att det skapas nya "lika" objekt i mina funktioner add och multiply. Får läsa på lite om detta och se om jag kan lösa det på ett bättre sätt!?</notes>
                            </stamp>
                            <stamp id="4" date="20141122" startTime="15:15" endTime="15:30">
                                <notes>Lösningen på gemensamma "fractions" löste jag under lunchen. Lösningen gjordes genom att skapa en "run"-funktion som fick innehlla samtliga applikations funktionen (ej konstruktorn) och därtill deklarerade jag fractions[3]. fractions[0] = första bråktal. fractions[1] = andra bråktalet. fractions[2] = genererat "nytt" bråktal oberoende av vilken metod som används i "klassen" Fraction. Givetvis heter det inte klass i Javscript men jag uttrycker mig så...</notes>    
                            </stamp>
                            <stamp id="1" date="20141121" startTime="14:00" endTime="15:00">
                                <notes>Satt samman  det mesta. Återstår "IsNegative" och eventuellt Euklides om jag hinner...</notes>
                            </stamp>
                            <dataP>[+02:00] Kalkylens tid</dataP>
                            <dataP>[+00:00] Faktiskt tid</dataP>
                            <dataP>[+00:00] Resultat tid</dataP>
            
                        <dataH>[x] Grafiskt Gränssnitt html/css</dataH>
                            <stamp id="1" date="20141122" startTime="10:00" endTime="11:30">
                                <notes>För att en användare ska kunna jobba mot den klass innehållandes metoder måste jag skapa ett fungerande gränssnitt med html/css och javascript. Känner att det är en nyttig utmaning!</notes>
                            </stamp>
                            <dataP>[+02:00] Kalkylens tid</dataP>
                            <dataP>[+01:30] Faktiskt tid</dataP>
                            <dataP>[+00:30] Resultat tid</dataP>
                            
                        <dataH>[x] Överkurs Euklides om tid finns</dataH>
                            <dataP>[+03:00] Kalkylens tid</dataP>
                            <dataP>[+00:00] Faktiskt tid</dataP>
                            <dataP>[+00:00] Resultat tid</dataP>
                            
                            
                    </planningList>          
                </planning>
                    <failure>
                        <failureList>
                            <failurePoint>Misstag</failurePoint>  
                                <data>Ett återkommande misstag jag upptäck att jag gör att när jag ska göra ett funktionsuttryck på prototypen så gör jag det som en funktionsdeklaration. Något jag måste aktivt tänka på då det hindrar mig när jag felsöker...</data>
                                <data>Att tänka på i framtiden är att vara noga med att jobba strukturerat när det kommer till kodning av algoritmiskt karaktär. Snubblade väldigt ofta på täljaren och nämnare då jag kodade lösningarna direkt utan att pränta ner det på papper först. Logik Logik Logik. Även enkel logik blir knepig när kodbasen växer...</data>
                        </failureList>
                    </failure>
                    <planningDeviation>
                        <planningDeviationList>
                            <planningDeviationPoint>Avvikelser</planningDeviationPoint>
                                <data>När jag började skissa så hade jag inte riktigt svaren direkt på hu jag skulle implementera metoder mm. För att kanske kunna få en något bättre "helhetsbild" av programmet väljer jag därför att hämta diverse filer som jag kan återvinna från tidigare uppgifter.</data>
                                <data>Börjar bli svårt att hitta snabbt i mina xml kommentare. Små avvikelser görs nu hela tiden och tappar tråden. Känns lite som att jag drar i flera trådar samtidigt. Men arbete går trots allt framåt!</data>
                                <data>Tidsplanering kommer att spricka för att få till ett grafiskt gränssnitt som jobbar mot mina klasser. Inser att jag inte är tillräckligt duktig på detta ännu då jag känner att jag har behov av följa ett manuskript då jag aldrig har gjort det innan.</data>
                        </planningDeviationList>
                    </planningDeviation>
            </documentation>
        </excercise>    
        <reflections>
        <stamp id="1" date="20141123" startTime="8:00" endTime="09:00">
            <notes>(Planering, tänka efter, fundera, begrunda, spekulera, överväga är ord som hjälper mig att komma igenom skrivandet för att om möjligt uppnå kravet på antal ord i reflektionerna)</notes>
        </stamp>
            <reflection>Test</reflection>
        </reflections>    
    </collection>
<script xmlns="http://www.w3.org/1999/xhtml" src="js/main.js"></script>
</excercises>












